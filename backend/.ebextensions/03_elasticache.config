resources:
  AWSElasticCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow EC2 instances to connect to ElastiCache"
      VpcId: {"Fn::GetAtt": ["AWSEBV2LoadBalancer", "VPCId"]}
  AWSElasticCacheSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Ref": "AWSElasticCacheSecurityGroup"}
      IpProtocol: "tcp"
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: {"Fn::GetAtt": ["AWSEBSecurityGroup", "GroupId"]}
  AWSElasticCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "ElastiCache Subnet Group"
      SubnetIds:
        - "subnet-0123456789abcdef0" # Replace with your actual subnet ID
        - "subnet-fedcba9876543210f" # Replace with your actual subnet ID
  AWSElasticCacheCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupDescription: "Applaude Celery Redis"
      ReplicationGroupId: "applaude-redis"
      CacheNodeType: "cache.t3.micro"
      Engine: "redis"
      EngineVersion: "6.x"
      NumNodeGroups: 1
      ReplicasPerNodeGroup: 1
      AutomaticFailoverEnabled: true
      SecurityGroupIds:
        - {"Ref": "AWSElasticCacheSecurityGroup"}
      CacheSubnetGroupName: {"Ref": "AWSElasticCacheSubnetGroup"}

outputs:
  RedisEndpoint:
    Description: "The DNS name of the Redis primary endpoint"
    Value: {"Fn::GetAtt": ["AWSElasticCacheCluster", "PrimaryEndPoint.Address"]}
    Export:
      Name: "ApplaudeRedisEndpoint"
