from rest_framework import viewsets, permissions, status
from .models import Project
from .serializers import ProjectSerializer
from agents.tasks import run_market_analysis, run_design_analysis, run_code_generation, run_security_scan, run_qa_check, run_deployment
from celery import chain
import zipfile
import io
from django.http import HttpResponse
from rest_framework.decorators import action
from rest_framework.response import Response
from github import Github, GithubException

class ProjectViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows users to view and manage their projects.
    """
    serializer_class = ProjectSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        """
        This view should return a list of all the projects
        for the currently authenticated user.
        
        Optimized with select_related to pre-fetch the owner.
        """
        return Project.objects.filter(owner=self.request.user).select_related('owner').order_by('-created_at')

    def perform_create(self, serializer):
        """
        Assign the owner of the project to the logged-in user and
        kick off the asynchronous AI agent pipeline.
        """
        # First, save the project instance with the owner
        project = serializer.save(owner=self.request.user)

        # Create a chain of tasks.
        analysis_pipeline = chain(
            run_market_analysis.s(project.id),
            run_design_analysis.s(project.id),
            run_code_generation.s(project.id),
            run_security_scan.s(project.id),
            run_qa_check.s(project.id),
            run_deployment.s(project.id)
        )
        
        # Execute the pipeline in the background.
        analysis_pipeline.delay()

    @action(detail=True, methods=['get'], url_path='download-code')
    def download_codebase(self, request, pk=None):
        """
        Creates a ZIP archive of the generated codebase and returns it for download.
        """
        project = self.get_object()
        # This is a simulation. In a real scenario, you would have the file paths
        # to the generated code, likely stored on S3.
        # For now, we create a dummy file to represent the codebase.
        
        buffer = io.BytesIO()
        with zipfile.ZipFile(buffer, 'w') as zip_file:
            # Dummy file 1: README.md
            readme_content = f"# Codebase for {project.name}\n\nGenerated by Applause.ai"
            zip_file.writestr('README.md', readme_content)
            
            # Dummy file 2: main.py
            main_py_content = f"print('Hello from {project.name}')"
            zip_file.writestr('main.py', main_py_content)

        buffer.seek(0)
        response = HttpResponse(buffer, content_type='application/zip')
        response['Content-Disposition'] = f'attachment; filename="{project.name}_codebase.zip"'
        return response

    # **MODIFIED: Add custom action to push code to GitHub**
    @action(detail=True, methods=['post'], url_path='push-to-github')
    def push_to_github(self, request, pk=None):
        """
        Pushes the generated codebase to a new private repository on the user's GitHub account.
        """
        project = self.get_object()
        user = request.user

        if not user.github_token:
            return Response({'error': 'GitHub account not linked. Please authenticate with GitHub first.'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            g = Github(user.github_token)
            github_user = g.get_user()

            # Create a new private repository
            repo_name = f"applause-app-{project.name.lower().replace(' ', '-')}"
            try:
                repo = github_user.create_repo(repo_name, private=True)
            except GithubException as e:
                if e.status == 422: # Repository already exists
                    return Response({'error': 'A repository with this name already exists on your GitHub account.'}, status=status.HTTP_400_BAD_REQUEST)
                else:
                    raise e
            
            # This is a simulation of pushing code. In a real scenario, you would
            # clone the repo, add the generated files, commit, and push.
            # For now, we will just create a README file.
            readme_content = f"# {project.name}\n\nThis project was generated by Applause.ai.\nSource URL: {project.source_url}"
            repo.create_file("README.md", "Initial commit from Applause.ai", readme_content)

            return Response({'message': 'Successfully pushed to GitHub!', 'repo_url': repo.html_url}, status=status.HTTP_200_OK)

        except GithubException as e:
            return Response({'error': f'An error occurred with the GitHub API: {e}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        except Exception as e:
            return Response({'error': f'An unexpected error occurred: {e}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
