from rest_framework import viewsets, permissions
from .models import Project
from .serializers import ProjectSerializer
from agents.tasks import run_market_analysis, run_design_analysis, run_code_generation, run_security_scan, run_qa_check, run_deployment
from celery import chain
import zipfile
import io
from django.http import HttpResponse
from rest_framework.decorators import action

class ProjectViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows users to view and manage their projects.
    """
    serializer_class = ProjectSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        """
        This view should return a list of all the projects
        for the currently authenticated user.
        
        Optimized with select_related to pre-fetch the owner.
        """
        return Project.objects.filter(owner=self.request.user).select_related('owner').order_by('-created_at')

    def perform_create(self, serializer):
        """
        Assign the owner of the project to the logged-in user and
        kick off the asynchronous AI agent pipeline.
        """
        # First, save the project instance with the owner
        project = serializer.save(owner=self.request.user)

        # Create a chain of tasks.
        analysis_pipeline = chain(
            run_market_analysis.s(project.id),
            run_design_analysis.s(project.id),
            run_code_generation.s(project.id),
            run_security_scan.s(project.id),
            run_qa_check.s(project.id),
            run_deployment.s(project.id)
        )
        
        # Execute the pipeline in the background.
        analysis_pipeline.delay()

    @action(detail=True, methods=['get'], url_path='download-code')
    def download_codebase(self, request, pk=None):
        """
        Creates a ZIP archive of the generated codebase and returns it for download.
        """
        project = self.get_object()
        # This is a simulation. In a real scenario, you would have the file paths
        # to the generated code, likely stored on S3.
        # For now, we create a dummy file to represent the codebase.
        
        buffer = io.BytesIO()
        with zipfile.ZipFile(buffer, 'w') as zip_file:
            # Dummy file 1: README.md
            readme_content = f"# Codebase for {project.name}\n\nGenerated by Applause.ai"
            zip_file.writestr('README.md', readme_content)
            
            # Dummy file 2: main.py
            main_py_content = f"print('Hello from {project.name}')"
            zip_file.writestr('main.py', main_py_content)

        buffer.seek(0)
        response = HttpResponse(buffer, content_type='application/zip')
        response['Content-Disposition'] = f'attachment; filename="{project.name}_codebase.zip"'
        return response
