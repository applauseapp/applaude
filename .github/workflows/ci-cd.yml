name: Applaude Backend CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  EB_APPLICATION_NAME: "applaude-backend"
  EB_ENVIRONMENT_NAME: "applaude-backend-prod"
  AWS_REGION: "us-east-1"

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run tests
        run: |
          cd backend
          python manage.py test

  build-and-push-to-ecr:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' # Only run on merge to main
    
    outputs:
      image_tag: ${{ steps.build-image.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push the Docker image from the 'backend' directory
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Set the image_tag output for the next job
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-backend-production:
    name: Deploy to Elastic Beanstalk Production
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create deployment artifact
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.build-and-push-to-ecr.outputs.image_tag }}
        run: |
          # Create the Dockerrun.aws.json file
          echo '{' > Dockerrun.aws.json
          echo '  "AWSEBDockerrunVersion": "1",' >> Dockerrun.aws.json
          echo '  "Image": {' >> Dockerrun.aws.json
          echo '    "Name": "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",' >> Dockerrun.aws.json
          echo '    "Update": "true"' >> Dockerrun.aws.json
          echo '  },' >> Dockerrun.aws.json
          echo '  "Ports": [' >> Dockerrun.aws.json
          echo '    {' >> Dockerrun.aws.json
          echo '      "ContainerPort": "8000"' >> Dockerrun.aws.json
          echo '    }' >> Dockerrun.aws.json
          echo '  ]' >> Dockerrun.aws.json
          echo '}' >> Dockerrun.aws.json
          
          # THE FIX: Zip all required deployment configs into the artifact.
          # This includes Dockerrun.aws.json and the .ebextensions and .platform directories from the backend folder.
          zip -r deploy.zip Dockerrun.aws.json backend/.ebextensions backend/.platform

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
          region: ${{ env.AWS_REGION }}
          version_label: "prod-${{ needs.build-and-push-to-ecr.outputs.image_tag }}"
          deployment_package: deploy.zip
