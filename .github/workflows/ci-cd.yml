name: Applaude Production CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  AWS_REGION: us-east-1
  ECR_REPOSITORY: applaude-backend
  EB_APPLICATION_NAME: applaude-backend
  EB_STAGING_ENV_NAME: applaude-staging-env
  EB_PROD_ENV_NAME: applaude-prod-env
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  lint-and-test:
    name: Lint, Test & Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with: { python-version: '3.11' }
      - uses: actions/setup-node@v3
        with: { node-version: '18', cache: 'npm', cache-dependency-path: 'frontend/package-lock.json' }

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: pip install -r requirements.txt

      - name: Run Backend Linters (black, flake8)
        working-directory: ./backend
        run: |
          black --check .
          flake8 .

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run Frontend Lint (ESLint)
        working-directory: ./frontend
        run: npm run lint

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.11@master
        continue-on-error: true # Do not fail build on Snyk finding
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: snyk test --all-projects --fail-on=upgradable --severity-threshold=high

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Staging (EB)
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_STAGING_ENV_NAME }}
          version_label: staging-${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          deployment_package: backend/deploy.zip # Assuming you create this zip
      - name: Deploy Frontend to Vercel Staging
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID}}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID}}
          vercel-args: '--cwd ./frontend'

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Production (EB)
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_PROD_ENV_NAME }}
          version_label: prod-${{ github.sha }}
          region: ${{ env.AWS_REGION }}
          deployment_package: backend/deploy.zip
      - name: Deploy Frontend to Vercel Production
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID}}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID}}
          vercel-args: '--prod --cwd ./frontend'
