name: Applaude Backend CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  EB_APPLICATION_NAME: "applaude-backend"
  EB_ENVIRONMENT_NAME: "applaude-backend-prod"
  AWS_REGION: "us-east-1"

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r backend/requirements.txt

      - name: Run tests
        run: python backend/manage.py test

  build-and-deploy:
    name: Build, Push, and Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create deployment artifact
        run: |
          # Create the Dockerrun.aws.json file pointing to the new image
          echo '{' > Dockerrun.aws.json
          echo '  "AWSEBDockerrunVersion": "2",' >> Dockerrun.aws.json
          echo '  "Image": {' >> Dockerrun.aws.json
          echo '    "Name": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.build-image.outputs.image_tag }}",' >> Dockerrun.aws.json
          echo '    "Update": "true"' >> Dockerrun.aws.json
          echo '  },' >> Dockerrun.aws.json
          echo '  "Ports": [' >> Dockerrun.aws.json
          echo '    {' >> Dockerrun.aws.json
          echo '      "ContainerPort": "8000"' >> Dockerrun.aws.json
          echo '    }' >> Dockerrun.aws.json
          echo '  ]' >> Dockerrun.aws.json
          echo '}' >> Dockerrun.aws.json
          
          # Zip all required deployment configurations into a single artifact
          zip -r deploy.zip Dockerrun.aws.json backend/.ebextensions backend/.platform

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
          region: ${{ env.AWS_REGION }}
          version_label: "prod-${{ steps.build-image.outputs.image_tag }}"
          deployment_package: deploy.zip
